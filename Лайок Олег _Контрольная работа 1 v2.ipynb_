{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"colab":{"name":"Лайок Олег \"Контрольная работа 1 v2.ipynb\"","provenance":[{"file_id":"1yXlUU1Q2JX1xaX9tTgmdm3mwFegkZDNP","timestamp":1636103051585},{"file_id":"1WkfEYHzFv-gCB2mSZzCKo64RCTzPKCqF","timestamp":1635146834370},{"file_id":"1C__qwW1XHxb8V1S-VBl0aUIs60C8i4XZ","timestamp":1603813504364},{"file_id":"13f5fqBM4UwfYNSlN875KVxhTK9m9T-Lv","timestamp":1596005590563},{"file_id":"1kqwKoBxu4k4IHygJbxVzPPzaLohsAB3m","timestamp":1595316081847}],"collapsed_sections":["Mz4rsFhALqbJ"]}},"cells":[{"cell_type":"markdown","metadata":{"id":"LYKqDli0Lqas"},"source":["# Рубежная контрольная работа\n","\n","*Эту работу выполнять не обязательно. Баллы, набранные за эту контрольную работу просуммируются с баллами, которые будут набраны за контрольную работу 2 и выставлены как оценка за экзамен \"автоматом\". Если вы не выполните эту работу, переписать её будет невозможно, просто приходите на экзамен и добирайте баллы там.*"]},{"cell_type":"markdown","metadata":{"id":"Cdt8kOfu4K3x"},"source":["Сделайте копию ноутбука\n","\n","Присвойте переменной `v` значение свой табельный номер ИСУ, это нужно для определения вашего варианта. Запустите код в следующей ячейке."]},{"cell_type":"code","metadata":{"id":"38Ryn8pjvYqb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636103175900,"user_tz":-180,"elapsed":5,"user":{"displayName":"Олег Лайок","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGUZQge5cEWTDYfwbY-iuk7Qjtwyl3Xsm3gwYPjQ=s64","userId":"11400771429504444117"}},"outputId":"b21ff127-13c3-4845-c51f-781898814fc3"},"source":["from datetime import datetime\n","current_datetime = datetime.now()\n","print(current_datetime)\n","v = 286507 # по умолчанию вписан мой номер"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-05 09:06:16.552499\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qr0CAgObPOv7"},"source":["## Описание метрического алгоритма"]},{"cell_type":"markdown","metadata":{"id":"OFP_i1F1Lqay"},"source":["Пусть задана обучающая выборка пар \"объект-ответ\" $X^m = \\{(x_1,y_1),\\dots,(x_m,y_m)\\}.$\n","\n","Пусть на множестве объектов задана функция расстояния $\\rho(x,x')$. Чем больше значение этой функции, тем менее схожими являются два объекта $x, x'$. \n","В простейшем случае используется евклидова метрика: $\\rho(x,x') = \\sqrt {\\sum _{i=1}^{n}(x_{i}-x'_{i})^{2}}$,\n","\n","Для произвольного объекта $u$ расположим объекты обучающей выборки $x_i$ в порядке возрастания расстояний до $u$:\n","\n","$$\\rho(u,x_{1; u}) \\leq  \\rho(u,x_{2; u}) \\leq \\cdots \\leq \\rho(u,x_{m; u}),$$\n","где через $x_{i; u}$ обозначается тот объект обучающей выборки, который является $i$-м соседом объекта $u$. Аналогичное обозначение введём и для ответа на $i$-м соседе: $y_{i; u}$. Таким образом, произвольный объект $u$ порождает свою перенумерацию выборки. В наиболее общем виде алгоритм ближайших соседей есть:\n","$$a(u) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] w(i,u),$$\n","где $w(i,u)$ - заданная весовая функция, которая оценивает степень важности $i$-го соседа для классификации объекта $u$. Естественно полагать, что эта функция не отрицательна и не возрастает по $i$ (поскольку чем дальше объект, тем меньший вклад он должен вносить в пользу своего класса).\n","\n","По-разному задавая весовую функцию, можно получать различные варианты метода ближайших соседей.\n","\n","$w(i,u) = [i=1]$ - простейший метод ближайшего соседа;\n","\n","$w(i,u) = [i\\leq k]$ - метод $k$ ближайших соседей;\n","\n","$w(i,u) = [i\\leq k] q^i$ - метод $k$ экспоненциально взвешенных ближайших соседей, где предполагается константа $q < 1$\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9O9wv47JPzIf"},"source":["**Использование ядер сглаживания**\n","\n","Для избежания неоднозначности ответа при классификации в качестве весовой функции $w(i, u)$ используют функцию ядра $K(r)$\n","\n","Примеры ядер:\n","\n","Triangular: ${\\displaystyle K(r)=(1-|r|)}$,\n","\n","Parabolic: ${\\displaystyle K(r)={\\frac {3}{4}}(1-r^{2})}$,\n","\n","Tricube: ${\\displaystyle K(r)={\\frac {70}{81}}(1-{\\left|r\\right|}^{3})^{3}}$.\n","\n","**Метод парзеновского окна**\n","\n","Алгоритм $k$ ближайших соседей можно обобщить с помощью функции ядра. Рассмотрим два способа, которыми это можно сделать.\n","\n","Метод парзеновского окна фиксированной ширины  $h$:\n","$$w(i,u) = K\\biggl(\\frac{\\rho(u,x_{i; u})}{h}\\biggr)$$\n","\n","Метод парзеновского окна переменной ширины:\n","$$w(i,u) = K\\biggl(\\frac{\\rho(u,x_{i; u})}{\\rho(u,x_{k+1; u})}\\biggr)$$\n","\n","Таким образом классификаторы, полученные при использовании этих методов, можно записать в следующем виде\n","\n","Фиксированной ширины: $$a_h = a(u, X^m, \\boldsymbol{h}, K) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] K\\biggl(\\frac{\\rho(u,x_{i; u})}{h}\\biggr)$$\n","\n","Переменной ширины (фиксированное число соседей): \n","$$a_k = a(u, X^m, \\boldsymbol{k}, K) = \\mathrm{arg}\\max_{y\\in Y} \\sum_{i=1}^m \\bigl[ y_{i; u}=y \\bigr] K\\biggl(\\frac{\\rho(u,x_{i; u})}{\\rho(u,x_{k+1; u})}\\biggr)$$\n"]},{"cell_type":"markdown","metadata":{"id":"QChjKJIRPWty"},"source":["# Задание 1 (7 баллов)\n","\n","В задании требуется написать свою реализацию метрического алгоритма. \n","\n","В качестве расстояния между объектами в этом задании используйте евклидово расстояние. \n","\n","В качестве функции ядра используйте Triangular."]},{"cell_type":"markdown","metadata":{"id":"F57T22yav-gp"},"source":["Для выбора варианта, запустите код в следующей ячейке\n","\n"]},{"cell_type":"code","metadata":{"id":"zFcuNXzcwMbH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636103191198,"user_tz":-180,"elapsed":281,"user":{"displayName":"Олег Лайок","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGUZQge5cEWTDYfwbY-iuk7Qjtwyl3Xsm3gwYPjQ=s64","userId":"11400771429504444117"}},"outputId":"006d1355-1969-4ef1-c314-7c444edf1800"},"source":["if (int(str(v)[4]) % 2) == 0:\n","  print ('1.1 В алгоритме число соседей должно быть фиксированным. Настроить гиперпараметр k, для оценки качества использовать ROC-AUC')\n","else:\n","  print ('1.1 В алгоритме число соседей не должно быть фиксированным. Настроить гиперпараметр h (ширина окна), для оценки качества использовать использовать F1-меру')\n","\n","if (int(str(v)[4]) % 2) == 0:\n","  print ('1.2 Построить график зависимости метрики качества на обучающей выборке от k')\n","else: \n","  print ('1.2 Построить график зависимости метрики качества на контрольной выборке от h')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.1 В алгоритме число соседей должно быть фиксированным. Настроить гиперпараметр k, для оценки качества использовать ROC-AUC\n","1.2 Построить график зависимости метрики качества на обучающей выборке от k\n"]}]},{"cell_type":"markdown","metadata":{"id":"ms_1FH-3S_7E"},"source":["Протестирйуте эту реализацию на наборе данных breast_cancer:\n","\n","https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html"]},{"cell_type":"code","metadata":{"id":"gHGUZu8rLqa8"},"source":["from sklearn.datasets import load_breast_cancer\n","cancer = load_breast_cancer()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XL9H9vXATHcc"},"source":["Штрафы:\n","* отсутствие реализации алгоритма (4 балла)\n","* ошибки в реализации алгоритма (2 балла)\n","* отсутствие настройки гиперпараметра (2 балла)\n","* ошибки в настройке гиперпараметра (1 балл)\n","* отсутствие графика (1 балл)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wv2o18pvXmbV","executionInfo":{"status":"ok","timestamp":1636103969288,"user_tz":-180,"elapsed":5,"user":{"displayName":"Олег Лайок","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGUZQge5cEWTDYfwbY-iuk7Qjtwyl3Xsm3gwYPjQ=s64","userId":"11400771429504444117"}},"outputId":"e4cdc3b5-05bb-4b59-b33d-a4ae6b5ec4f7"},"source":["cancer"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'DESCR': '.. _breast_cancer_dataset:\\n\\nBreast cancer wisconsin (diagnostic) dataset\\n--------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 569\\n\\n    :Number of Attributes: 30 numeric, predictive attributes and the class\\n\\n    :Attribute Information:\\n        - radius (mean of distances from center to points on the perimeter)\\n        - texture (standard deviation of gray-scale values)\\n        - perimeter\\n        - area\\n        - smoothness (local variation in radius lengths)\\n        - compactness (perimeter^2 / area - 1.0)\\n        - concavity (severity of concave portions of the contour)\\n        - concave points (number of concave portions of the contour)\\n        - symmetry \\n        - fractal dimension (\"coastline approximation\" - 1)\\n\\n        The mean, standard error, and \"worst\" or largest (mean of the three\\n        largest values) of these features were computed for each image,\\n        resulting in 30 features.  For instance, field 3 is Mean Radius, field\\n        13 is Radius SE, field 23 is Worst Radius.\\n\\n        - class:\\n                - WDBC-Malignant\\n                - WDBC-Benign\\n\\n    :Summary Statistics:\\n\\n    ===================================== ====== ======\\n                                           Min    Max\\n    ===================================== ====== ======\\n    radius (mean):                        6.981  28.11\\n    texture (mean):                       9.71   39.28\\n    perimeter (mean):                     43.79  188.5\\n    area (mean):                          143.5  2501.0\\n    smoothness (mean):                    0.053  0.163\\n    compactness (mean):                   0.019  0.345\\n    concavity (mean):                     0.0    0.427\\n    concave points (mean):                0.0    0.201\\n    symmetry (mean):                      0.106  0.304\\n    fractal dimension (mean):             0.05   0.097\\n    radius (standard error):              0.112  2.873\\n    texture (standard error):             0.36   4.885\\n    perimeter (standard error):           0.757  21.98\\n    area (standard error):                6.802  542.2\\n    smoothness (standard error):          0.002  0.031\\n    compactness (standard error):         0.002  0.135\\n    concavity (standard error):           0.0    0.396\\n    concave points (standard error):      0.0    0.053\\n    symmetry (standard error):            0.008  0.079\\n    fractal dimension (standard error):   0.001  0.03\\n    radius (worst):                       7.93   36.04\\n    texture (worst):                      12.02  49.54\\n    perimeter (worst):                    50.41  251.2\\n    area (worst):                         185.2  4254.0\\n    smoothness (worst):                   0.071  0.223\\n    compactness (worst):                  0.027  1.058\\n    concavity (worst):                    0.0    1.252\\n    concave points (worst):               0.0    0.291\\n    symmetry (worst):                     0.156  0.664\\n    fractal dimension (worst):            0.055  0.208\\n    ===================================== ====== ======\\n\\n    :Missing Attribute Values: None\\n\\n    :Class Distribution: 212 - Malignant, 357 - Benign\\n\\n    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\\n\\n    :Donor: Nick Street\\n\\n    :Date: November, 1995\\n\\nThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\\nhttps://goo.gl/U2Uwz2\\n\\nFeatures are computed from a digitized image of a fine needle\\naspirate (FNA) of a breast mass.  They describe\\ncharacteristics of the cell nuclei present in the image.\\n\\nSeparating plane described above was obtained using\\nMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\\nConstruction Via Linear Programming.\" Proceedings of the 4th\\nMidwest Artificial Intelligence and Cognitive Science Society,\\npp. 97-101, 1992], a classification method which uses linear\\nprogramming to construct a decision tree.  Relevant features\\nwere selected using an exhaustive search in the space of 1-4\\nfeatures and 1-3 separating planes.\\n\\nThe actual linear program used to obtain the separating plane\\nin the 3-dimensional space is that described in:\\n[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\\nProgramming Discrimination of Two Linearly Inseparable Sets\",\\nOptimization Methods and Software 1, 1992, 23-34].\\n\\nThis database is also available through the UW CS ftp server:\\n\\nftp ftp.cs.wisc.edu\\ncd math-prog/cpo-dataset/machine-learn/WDBC/\\n\\n.. topic:: References\\n\\n   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \\n     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \\n     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\\n     San Jose, CA, 1993.\\n   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \\n     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \\n     July-August 1995.\\n   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\\n     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \\n     163-171.',\n"," 'data': array([[1.799e+01, 1.038e+01, 1.228e+02, ..., 2.654e-01, 4.601e-01,\n","         1.189e-01],\n","        [2.057e+01, 1.777e+01, 1.329e+02, ..., 1.860e-01, 2.750e-01,\n","         8.902e-02],\n","        [1.969e+01, 2.125e+01, 1.300e+02, ..., 2.430e-01, 3.613e-01,\n","         8.758e-02],\n","        ...,\n","        [1.660e+01, 2.808e+01, 1.083e+02, ..., 1.418e-01, 2.218e-01,\n","         7.820e-02],\n","        [2.060e+01, 2.933e+01, 1.401e+02, ..., 2.650e-01, 4.087e-01,\n","         1.240e-01],\n","        [7.760e+00, 2.454e+01, 4.792e+01, ..., 0.000e+00, 2.871e-01,\n","         7.039e-02]]),\n"," 'feature_names': array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n","        'mean smoothness', 'mean compactness', 'mean concavity',\n","        'mean concave points', 'mean symmetry', 'mean fractal dimension',\n","        'radius error', 'texture error', 'perimeter error', 'area error',\n","        'smoothness error', 'compactness error', 'concavity error',\n","        'concave points error', 'symmetry error',\n","        'fractal dimension error', 'worst radius', 'worst texture',\n","        'worst perimeter', 'worst area', 'worst smoothness',\n","        'worst compactness', 'worst concavity', 'worst concave points',\n","        'worst symmetry', 'worst fractal dimension'], dtype='<U23'),\n"," 'filename': '/usr/local/lib/python3.7/dist-packages/sklearn/datasets/data/breast_cancer.csv',\n"," 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","        0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","        1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","        1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","        0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","        1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","        0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","        1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","        1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","        0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","        1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","        1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","        1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","        1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","        1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1]),\n"," 'target_names': array(['malignant', 'benign'], dtype='<U9')}"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"ffUCryZhZQXs"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, test_size=0.33, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6W4ipSGPZfgH"},"source":["def dist(z,x): # distance between object z and object x\n","  sum = 0\n","  for i in range(len(x)):\n","    sum += (x[i] - z[i])**2\n","  sum = sum**(0.5)\n","  return sum"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sgWjqH76ZfSt"},"source":["from collections import Counter\n","def kNN_predict(X_train,y_train, k=7):\n","  y_predicted = []\n","  for i in range(len(X_train)):\n","    z = X_train[i]\n","    z_dist = {}\n","    for j in range(len(X_train)):\n","      z_dist[j]= dist(z,X_train[j])\n","    z_dist = sorted(z_dist.items(), key=lambda item: item[1])\n","    neigh = [list(i) for i in z_dist[:k]]\n","    for n in neigh:\n","      n[0] = y_train[n[0]]\n","    classes = [neigh[i][0] for i in range(len(neigh))]\n","    y_predicted.append(Counter(classes).most_common()[0][0])\n","  return(y_predicted)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PL118oq7ZfDt"},"source":["test_pred = kNN_predict(X_test,y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VBMx4_MhqhvA","executionInfo":{"status":"ok","timestamp":1636109798634,"user_tz":-180,"elapsed":19205,"user":{"displayName":"Олег Лайок","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGUZQge5cEWTDYfwbY-iuk7Qjtwyl3Xsm3gwYPjQ=s64","userId":"11400771429504444117"}},"outputId":"3b5a449f-96e1-4ed9-f25e-8d02cfac9b29"},"source":["aucs = []\n","k = [i for i in range(1,20)]\n","for k_i in k: # настраиваем k с помощью нахождения auc-roc\n","  test_pred = kNN_predict(X_test,y_test,k_i)\n","  c_0 = test_pred.count(0)\n","  c_1 = test_pred.count(1)\n","  fpr = [0]\n","  tpr = [0]\n","  auc = 0\n","  for i in range(1,len(test_pred)-1):\n","    if test_pred[i] == 0:\n","      fpr.append(fpr[i-1]+(1/c_0))\n","      tpr.append(tpr[i-1])\n","      auc = auc + (1/c_0)*tpr[i]\n","    else:\n","      tpr.append(tpr[i-1]+(1/c_0))\n","      fpr.append(fpr[i-1])\n","  aucs.append(auc)\n","print(aucs)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.8429494319447546, 0.8429494319447546, 0.8705234159779609, 0.8705234159779609, 0.8705234159779609, 0.9053254437869808, 0.8705234159779609, 0.9053254437869808, 0.9053254437869808, 0.9053254437869808, 0.908447265625, 0.9053254437869808, 0.962799167533818, 0.962799167533818, 1.0202777777777776, 1.0059123891427044, 1.0294292508917948, 1.0166666666666664, 1.0155127836828481]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":638},"id":"tShPKwhFqhhV","executionInfo":{"status":"ok","timestamp":1636109937183,"user_tz":-180,"elapsed":859,"user":{"displayName":"Олег Лайок","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGUZQge5cEWTDYfwbY-iuk7Qjtwyl3Xsm3gwYPjQ=s64","userId":"11400771429504444117"}},"outputId":"2d7641ce-94ac-424c-a50f-ca91b771d6f2"},"source":["import matplotlib.pyplot as plt\n","plt.figure(figsize=(20,20))\n","plt.plot(k,aucs)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7eff9c47a710>]"]},"metadata":{},"execution_count":90},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1440 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZAB9AvuUyzfp"},"source":["Видимо на 6 функция достигает своего максимума, далее модель уже начинает переобучаться, поэтому максимум начинает возрастать с увеличением K, поэтому я думаю что к=6 будет оптимальным для этих данных"]},{"cell_type":"code","metadata":{"id":"t5CqSqcZqhYW"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mz4rsFhALqbJ"},"source":["# Задание 2 (4 балла)"]},{"cell_type":"markdown","metadata":{"id":"EHdzuZj-3dsF"},"source":["Требуется реализовать метрический алгоритм для предсказания действительного числа (то есть как в задаче регрессии, а не как в задаче классификации). \n","\n","В задании 2 не используйте ядра и метод парзеновского окна."]},{"cell_type":"markdown","metadata":{"id":"gOM9Kj8pLqbS"},"source":["Во этом задании в качестве исходных данных используется словарь кинокритиков и выставленных ими оценок"]},{"cell_type":"code","metadata":{"id":"ENkh6Gr98Pit"},"source":["critics={'Lisa Rose': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5,\n"," 'Just My Luck': 3.0, 'Superman Returns': 3.5, 'You, Me and Dupree': 2.5, \n"," 'The Night Listener': 3.0},\n","'Gene Seymour': {'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, \n"," 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, \n"," 'You, Me and Dupree': 3.5}, \n","'Michael Phillips': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0,\n"," 'Superman Returns': 3.5, 'The Night Listener': 4.0},\n","'Claudia Puig': {'Snakes on a Plane': 3.5, 'Just My Luck': 3.0,\n"," 'The Night Listener': 4.5, 'Superman Returns': 4.0, \n"," 'You, Me and Dupree': 2.5},\n","'Mick LaSalle': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, \n"," 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0,\n"," 'You, Me and Dupree': 2.0}, \n","'Jack Matthews': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0,\n"," 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5},\n","'Toby': {'Snakes on a Plane':4.5,'You, Me and Dupree':1.0,'Superman Returns':4.0}}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MVfEyvFj019l"},"source":["По этому словарю нужно сделать Dataframe в pandas. Строки это критики, столбцы - названия фильмов. На пересечении поставленные оценки. При отсуствии оценки у критика за фильм в датафрейме нужно поставить 0."]},{"cell_type":"markdown","metadata":{"id":"xakj7Hul1jMp"},"source":["Для выбора варианта, запустите код в следующей ячейке"]},{"cell_type":"code","metadata":{"id":"fvyYCARr1gLt"},"source":["if (int(str(v)[3]) % 2) == 0:\n","  print ('2.1 Сделайте предсказание оценок для критика Toby по фильмам, которые он ещё не видел')\n","else:\n","  print ('2.1 Сделайте предсказание оценок для фильма You, Me and Dupree по критикам, которые его ещё не видели')\n","print ('2.2 Объясните как оценить качество полученного предказания')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1lBTspUZFqWL"},"source":["Штрафы:\n","* отсутствие реализации алгоритма (2 балла)\n","* ошибки в реализации алгоритма (1 балл)\n","* отсутствие тестирования алгоритма (1 балл)\n","* отсутствие объяснения оценки качества алгоритма (1 балл)"]},{"cell_type":"markdown","metadata":{"id":"v_oFki5H3_vy"},"source":["После завершения контрольной работы, дайте ссылку на ноутбук в отдельном followup в своей теме на Piazza. Дайте разрешение на его просмотр.\n","\n","Не забудьте запустить код в последней ячейке для контроля времени выполнения."]},{"cell_type":"code","metadata":{"id":"HncJvMmo35Kv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636101419087,"user_tz":-180,"elapsed":357,"user":{"displayName":"Maksim Khlopotov","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjrfi2fUKbxZsEmFSi6eHxb-YT0aNnTzgBjBm83jg=s64","userId":"17573813484649782255"}},"outputId":"b504d685-2aec-4edf-ee73-8eccc7cfa223"},"source":["current_datetime = datetime.now()\n","print(current_datetime)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-05 08:36:58.912553\n"]}]}]}